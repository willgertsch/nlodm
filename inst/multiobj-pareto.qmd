---
title: "Multi-objective design using Pareto fronts"
format: html
editor: visual
---

```{r setup}
library(ggplot2)
library(dplyr)
library(tidyr)
library(drc)
```

## Introduction

Use deguelin data as an example and fit a 4 parameter log-logistic.
```{r}
#mod = drm(r/n ~ dose, weights=n, data=deguelin, fct=LL.4(), type='binomial')
# going to fit a 3 parameter model instead
mod = drm(r/n ~ dose, weights=n, data=deguelin, fct=LL.3u(), type='binomial')
```

```{r}
coef(mod)
```


```{r}
pred_data = data.frame(
  dose = seq(0, 50)
) %>%
  mutate(yhat = predict(mod, newdata = data.frame(dose)))

pred_data %>%
  ggplot(aes(x = dose, y = yhat)) +
  geom_line(color = 'blue') +
  geom_point(data=drc::deguelin, aes(x = dose, y = r/n), color = 'black') +
  theme_bw() +
  labs(y = 'P(death)', title = 'Effect of deguelin on Macrosiphoniella sanborni')
```

The model used by the drc package has the following form.
$$
f(x) = c + \frac{1-c}{1+\exp(b(\log(x)-\log(e)))}
$$
My optimal design code uses the parameterization in BMDS.
$$
f(x) = g + \frac{1-g}{1 + \exp(-a -b\log(x))}
$$
Need to convert from one parameterization to the other
```{r}
# b, c, e
theta0 = as.numeric(coef(mod))
# g, a, b
theta = c(theta0[2], theta0[1]*log(theta0[3]), -theta0[1])
```

Plot to check if correct.
```{r}
data.frame(
  dose = seq(0, 50)
) %>%
  mutate(yhat = theta[1] + (1-theta[1])/(1+exp(-theta[2]-theta[3]*log(dose)))) %>%
  ggplot(aes(x = dose, y = yhat)) +
  geom_line()
```

## Multi-objective optimization

## Designs for multiple criteria

### D and A
Find single objective designs first.

```{r}
# objective value for uniform design with 3 design points
eval_crit(
  x = seq(0.001, 50, length.out=3),
  w = rep(1/4, 3),
  grad_fun = grad.loglogistic,
  obj_fun = obj.A,
  theta = theta,
  param = c(),
  binary_response = T,
  dr_fun = f.loglogistic3.bmds
)
```


```{r}
D_opt = nlodm(
  grad_fun = grad.loglogistic,
  obj = "D",
  theta = theta,
  bound = 50,
  pts = 3,
  algorithm = 'DE',
  swarm = 100,
  iter = 500,
  seed = 423,
  binary_response = T,
  dr_fun = f.loglogistic3.bmds
)
```

```{r}
D_opt$plot
```

```{r}
D_opt$design
```

```{r, results='hide'}
# produces NaN's from binary_response = T
A_opt = nlodm(
  grad_fun = grad.loglogistic,
  obj = "A",
  theta = theta,
  bound = 50,
  pts = 3,
  algorithm = 'DE',
  swarm = 100,
  iter = 500,
  seed = 423,
  binary_response = T,
  dr_fun = f.loglogistic3.bmds
)
```

```{r}
A_opt$plot
```
```{r}
A_opt$design
```

```{r, results='hide'}
grad_funs = list(grad.loglogistic, grad.loglogistic)
obj_funs = list(obj.D, obj.A)
thetas = list(
    theta,
    theta
  )
params = list(
    c(),
    c()
  )
binary_responses = c(T,T)
dr_funs = list(f.loglogistic3.bmds, f.loglogistic3.bmds)

result = multi_obj(
    grad_funs = grad_funs,
    obj_funs = obj_funs,
    thetas = thetas,
    params = params,
    type = 'pareto',
    bound = 50,
    pts = 3,
    swarm = 100,
    maxiter = 500,
    verbose = F,
    exact = F,
    binary_responses = binary_responses,
    dr_funs = dr_funs
  )
```

```{r}
pareto_data = extract_front(result)
plot_pareto2d(pareto_data, c("D", "A")) +
  geom_vline(xintercept = 7.717531) +
  geom_hline(yintercept = 1546.254)
```
```{r}
# pareto front with scaled objective values
# changes to maximization format
extract_front(result) %>%
  mutate(obj1 = 7.717531/obj1, obj2 = 1546.254/obj2) %>%
  plot_pareto2d(c("D", "A"))
```
This plot suggests that getting a good design for A is more difficult.

Suppose we want designs with >0.98 on D and >0.90 on A. These designs are roughly the same so we can just take the one with the best performance on the A objective.
```{r}
extract_front(result) %>%
  mutate(obj1 = 7.717531/obj1, obj2 = 1546.254/obj2) %>%
  filter(obj1 > 0.98, obj2 > 0.90) %>% 
  arrange(desc(obj2)) %>%
  head(1)
```
This design no longer has equal weights, but not as extreme as the A optimal design. The highest dose is inbetween the D-optimal highest dose the the A-optimal higest dose.

### Continuous vs binary response
```{r}
D_opt_cont = nlodm(
  grad_fun = grad.loglogistic,
  obj = "D",
  theta = theta,
  bound = 50,
  pts = 3,
  algorithm = 'DE',
  swarm = 100,
  iter = 500,
  seed = 423,
  binary_response = F,
  dr_fun = f.loglogistic3.bmds
)
```

```{r}
D_opt$design
```

```{r}
D_opt_cont$design
```
The biggest difference between these designs is that assuming the binary response requires the 3rd point to be further out. This is probably because the variance in non-constant and more information is needed at higher doses.

Now try the Pareto-optimal approach.
```{r}
grad_funs = list(grad.loglogistic, grad.loglogistic)
obj_funs = list(obj.D, obj.D)
thetas = list(
    theta,
    theta
  )
params = list(
    c(),
    c()
  )
binary_responses = c(T,F)
dr_funs = list(f.loglogistic3.bmds, f.loglogistic3.bmds)

result = multi_obj(
    grad_funs = grad_funs,
    obj_funs = obj_funs,
    thetas = thetas,
    params = params,
    type = 'pareto',
    bound = 50,
    pts = 3,
    swarm = 100,
    maxiter = 500,
    verbose = F,
    exact = F,
    binary_responses = binary_responses,
    dr_funs = dr_funs
  )
```

```{r}
# front with optimal objective values overlayed
pareto_data = extract_front(result)
plot_pareto2d(pareto_data, c("D binary", "D continuous")) +
  geom_vline(xintercept = 7.717531) +# optimal binary
  geom_hline(yintercept = 12.81728) # optimal continuous
```

```{r}
# pareto front with scaled objective values
# changes to maximization format
extract_front(result) %>%
  mutate(obj1 = 7.717531/obj1, obj2 = 12.81728/obj2) %>%
  plot_pareto2d(c("D binary", "D continuous"))
```
From this plot we see that we can get designs with very high efficiency on both objectives. We can get the designs with efficiency requirements on each objectives.
```{r}
extract_front(result) %>%
  mutate(obj1 = 7.717531/obj1, obj2 = 12.81728/obj2) %>%
  filter(obj1 > 0.99, obj2 > 0.99)
```

It seems that having the high dose at around 27 is a good solution for managing the tradeoffs between a continuous and binary response assumption.

### D and BMD


## Designs with prior information

### 2 prior theta

### 3 prior theta

### 10 prior theta

## Designs with model uncertaintity

### Log-logistic vs multistage

### All the models
